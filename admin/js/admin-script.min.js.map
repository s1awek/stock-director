{"version":3,"file":"admin-script.min.js","names":["createApp","ref","computed","watch","nextTick","onMounted","onUnmounted","Vue","app","setup","conditions","initialConditions","newCondition","minQuantity","maxQuantity","message","formModified","currentConditions","value","length","lastCondition","immediate","isValidNewCondition","isRangeValid","parseInt","isMessageFilled","trim","isUniqueRange","every","condition","handleBeforeUnload","event","mwsData","reloadMessage","returnValue","window","addEventListener","removeEventListener","addCondition","push","sort","a","b","forEach","idx","document","getElementById","focus","removeCondition","index","splice","saveConditions","async","response","fetch","ajax_url","method","credentials","headers","body","URLSearchParams","action","nonce","JSON","stringify","ok","Error","json","success","console","log","error","mount"],"sources":["admin-script.js"],"mappings":"AAAA,MAAMA,UAAEA,UAASC,IAAEA,IAAGC,SAAEA,SAAQC,MAAEA,MAAKC,SAAEA,SAAQC,UAAEA,UAASC,YAAEA,aAAgBC,IAExEC,IAAMR,UAAU,CACpB,KAAAS,GAEE,MAAMC,EAAaT,IAAIU,mBAAqB,IACtCC,EAAeX,IAAI,CACvBY,YAAa,EACbC,YAAa,KACbC,QAAS,KAELC,EAAef,KAAI,GAEzBE,MAAMO,GAAaO,IAEjB,GADAD,EAAaE,OAAQ,EACjBD,EAAkBE,OAAS,EAAG,CAChC,MAAMC,EAAgBH,EAAkBA,EAAkBE,OAAS,GACnEP,EAAaM,MAAML,YAAcO,EAAcN,WACjD,MACEF,EAAaM,MAAML,YAAc,CACnC,GACC,CAAEQ,WAAW,IAIhB,MAAMC,EAAsBpB,UAAS,KACnC,MAAMW,YAAEA,EAAWC,YAAEA,EAAWC,QAAEA,GAAYH,EAAaM,MACrDK,EAA+B,OAAhBV,GAAwC,OAAhBC,GAAwBU,SAASX,GAAeW,SAASV,GAChGW,EAAkBV,EAAQW,OAAOP,OAAS,EAC1CQ,EAA4C,IAA5BjB,EAAWQ,MAAMC,QAAgBT,EAAWQ,MAAMU,OAAMC,GAC5Ef,EAAce,EAAUf,cAE1B,OAAOS,GAAgBE,GAAmBE,CAAa,IAyFzD,SAASG,EAAmBC,GAC1B,GAAIf,EAAaE,MAAO,CACtB,MAAMH,EAAUiB,QAAQC,eAAiB,4DAEzC,OADAF,EAAMG,YAAcnB,EACbA,CACT,CACF,CAGA,OAjBAV,WAAU,KACR8B,OAAOC,iBAAiB,eAAgBN,EAAmB,IAG7DxB,aAAY,KACV6B,OAAOE,oBAAoB,eAAgBP,EAAmB,IAYzD,CACLpB,aACAE,eACA0B,aAjGmB,KACfhB,EAAoBJ,QAEtBR,EAAWQ,MAAMqB,KAAK,IAAK3B,EAAaM,QACxCR,EAAWQ,MAAMsB,MAAK,CAACC,EAAGC,IAAMD,EAAE5B,YAAc6B,EAAE7B,cAGlDH,EAAWQ,MAAMyB,SAAQ,CAACd,EAAWe,KAC/BA,EAAM,IACRlC,EAAWQ,MAAM0B,GAAK/B,YAAcH,EAAWQ,MAAM0B,EAAM,GAAG9B,YAChE,IAIFF,EAAaM,MAAQ,CAAEL,YAAaH,EAAWQ,MAAMR,EAAWQ,MAAMC,OAAS,GAAGL,YAAaA,YAAa,KAAMC,QAAS,IAG3HX,UAAS,KACPyC,SAASC,eAAe,eAAeC,OAAO,IAElD,EA8EAC,gBA1EuBC,IAEvBvC,EAAWQ,MAAMgC,OAAOD,EAAO,GAGC,IAA5BvC,EAAWQ,MAAMC,OACnBP,EAAaM,MAAML,YAAc,EAG7BoC,EAAQvC,EAAWQ,MAAMC,SAE3BT,EAAWQ,MAAM+B,GAAOpC,YAAcH,EAAWQ,MAAM+B,EAAQ,GAAGnC,YAEtE,EA8DAqC,eA1DqBC,UAGrB,IACE,MAAMC,QAAiBC,MAAMtB,QAAQuB,SAAU,CAC7CC,OAAQ,OACRC,YAAa,cACbC,QAAS,CACP,eAAgB,qCAElBC,KAAM,IAAIC,gBAAgB,CACxBC,OAAQ,kBACRC,MAAO9B,QAAQ8B,MACfpD,WAAYqD,KAAKC,UAAUtD,EAAWQ,WAI1C,IAAKmC,EAASY,GACZ,MAAM,IAAIC,MAAM,uCAGSb,EAASc,QAEnBC,QAEfC,QAAQC,IAAI,kBAGZD,QAAQE,MAAM,gBAElB,CAAE,MAAOA,GAEPF,QAAQE,MAAM,eAAgBA,EAChC,CACAvD,EAAaE,OAAQ,CAAK,EAyB1BI,sBAEJ,IAGFd,IAAIgE,MAAM","ignoreList":[],"sourcesContent":["const { createApp, ref, computed, watch, nextTick, onMounted, onUnmounted } = Vue;\n\nconst app = createApp({\n  setup() {\n    // Reactive references for conditions and a new condition form\n    const conditions = ref(initialConditions || []);\n    const newCondition = ref({\n      minQuantity: 1,\n      maxQuantity: null,\n      message: ''\n    });\n    const formModified = ref(false);\n    // Watch for changes in conditions and update the new condition's minQuantity accordingly\n    watch(conditions, (currentConditions) => {\n      formModified.value = true;\n      if (currentConditions.length > 0) {\n        const lastCondition = currentConditions[currentConditions.length - 1];\n        newCondition.value.minQuantity = lastCondition.maxQuantity;\n      } else {\n        newCondition.value.minQuantity = 1; // Reset to 1 if there are no conditions\n      }\n    }, { immediate: true });\n\n\n    // Computed property to validate new condition\n    const isValidNewCondition = computed(() => {\n      const { minQuantity, maxQuantity, message } = newCondition.value;\n      const isRangeValid = minQuantity !== null && maxQuantity !== null && parseInt(minQuantity) < parseInt(maxQuantity);\n      const isMessageFilled = message.trim().length > 0;\n      const isUniqueRange = conditions.value.length === 0 || conditions.value.every(condition =>\n        maxQuantity > condition.maxQuantity\n      );\n      return isRangeValid && isMessageFilled && isUniqueRange;\n    });\n\n    // Method to add a new condition to the list\n    const addCondition = () => {\n      if (isValidNewCondition.value) {\n        // Sort conditions before adding a new one\n        conditions.value.push({ ...newCondition.value });\n        conditions.value.sort((a, b) => a.minQuantity - b.minQuantity);\n\n        // Update 'minQuantity' values of each condition to ensure they are in logical order\n        conditions.value.forEach((condition, idx) => {\n          if (idx > 0) {\n            conditions.value[idx].minQuantity = conditions.value[idx - 1].maxQuantity;\n          }\n        });\n\n        // Reset the new condition\n        newCondition.value = { minQuantity: conditions.value[conditions.value.length - 1].maxQuantity, maxQuantity: null, message: '' };\n\n        // Focus on the 'maxQuantity' field\n        nextTick(() => {\n          document.getElementById('maxQuantity').focus();\n        });\n      }\n    };\n\n    // Method to remove a condition from the list\n    const removeCondition = (index) => {\n      // Remove the selected condition\n      conditions.value.splice(index, 1);\n\n      // If there are no conditions left, reset the minQuantity for new condition to 1\n      if (conditions.value.length === 0) {\n        newCondition.value.minQuantity = 1;\n      } else {\n        // If the removed condition was not the last one, update the next condition's minQuantity\n        if (index < conditions.value.length) {\n          // Update the minQuantity of the next condition to the maxQuantity of the previous one\n          conditions.value[index].minQuantity = conditions.value[index - 1].maxQuantity;\n        }\n      }\n    };\n\n\n    const saveConditions = async () => {\n\n      // Sending data to WordPress via AJAX\n      try {\n        const response = await fetch(mwsData.ajax_url, {\n          method: 'POST',\n          credentials: 'same-origin',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          body: new URLSearchParams({\n            action: 'save_conditions',\n            nonce: mwsData.nonce,\n            conditions: JSON.stringify(conditions.value),\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok.');\n        }\n\n        const responseData = await response.json();\n\n        if (responseData.success) {\n          // Handle success\n          console.log('Settings saved');\n        } else {\n          // Handle WordPress related errors\n          console.error('Error from WP');\n        }\n      } catch (error) {\n        // Handle network errors\n        console.error('Fetch error:', error);\n      }\n      formModified.value = false; // Reset the formModified flag\n    }\n    onMounted(() => {\n      window.addEventListener('beforeunload', handleBeforeUnload);\n    });\n\n    onUnmounted(() => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    });\n\n    function handleBeforeUnload(event) {\n      if (formModified.value) {\n        const message = mwsData.reloadMessage || 'You have unsaved changes. Are you sure you want to leave?';\n        event.returnValue = message; // Standard browsers (Mozilla, Chrome)\n        return message;\n      }\n    }\n\n    // Expose the state and methods to the template\n    return {\n      conditions,\n      newCondition,\n      addCondition,\n      removeCondition,\n      saveConditions,\n      isValidNewCondition\n    };\n  }\n});\n\napp.mount('#wp-stock-director-settings');"]}