{"version":3,"file":"admin-script.min.js","names":["createApp","ref","computed","watch","nextTick","onMounted","onUnmounted","Vue","app","setup","conditions","initialConditions","loading","formModified","conditionsChanged","settingsSaved","settingsSaveError","newCondition","minQuantity","maxQuantity","message","currentConditions","length","lastCondition","value","immediate","isValidNewCondition","isRangeValid","parseInt","isMessageFilled","trim","isUniqueRange","every","condition","addCondition","push","sort","a","b","forEach","idx","document","getElementById","focus","removeCondition","index","splice","saveConditions","async","response","fetch","mwsData","ajax_url","method","credentials","headers","body","URLSearchParams","action","nonce","JSON","stringify","ok","Error","responseData","json","success","console","log","error","window","addEventListener","handleBeforeUnload","removeEventListener","event","reloadMessage","returnValue","mount"],"sources":["admin-script.js"],"mappings":"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","ignoreList":[],"sourcesContent":["const { createApp, ref, computed, watch, nextTick, onMounted, onUnmounted } = Vue;\n\nconst app = createApp({\n  setup() {\n    // Reactive references for conditions and a new condition form\n    const conditions = ref(initialConditions || []);\n    const loading = ref(false);\n    const formModified = ref(false);\n    const conditionsChanged = ref(false);\n    const settingsSaved = ref(false);\n    const settingsSaveError = ref(false);\n    const newCondition = ref({\n      minQuantity: 1,\n      maxQuantity: null,\n      message: ''\n    });\n    // Watch for changes in conditions and update the new condition's minQuantity accordingly\n    watch(conditions, (currentConditions) => {\n      if (currentConditions.length > 0) {\n        const lastCondition = currentConditions[currentConditions.length - 1];\n        newCondition.value.minQuantity = lastCondition.maxQuantity;\n        formModified.value = true; // Set the formModified flag to true\n      } else {\n        newCondition.value.minQuantity = 1; // Reset to 1 if there are no conditions\n      }\n    }, { immediate: true });\n\n\n    // Computed property to validate new condition\n    const isValidNewCondition = computed(() => {\n      const { minQuantity, maxQuantity, message } = newCondition.value;\n      const isRangeValid = minQuantity !== null && maxQuantity !== null && parseInt(minQuantity) < parseInt(maxQuantity);\n      const isMessageFilled = message.trim().length > 0;\n      const isUniqueRange = conditions.value.length === 0 || conditions.value.every(condition =>\n        maxQuantity > condition.maxQuantity\n      );\n      return isRangeValid && isMessageFilled && isUniqueRange;\n    });\n\n    // Method to add a new condition to the list\n    const addCondition = () => {\n      if (isValidNewCondition.value) {\n        // Sort conditions before adding a new one\n        conditions.value.push({ ...newCondition.value });\n        conditions.value.sort((a, b) => a.minQuantity - b.minQuantity);\n\n        // Update 'minQuantity' values of each condition to ensure they are in logical order\n        conditions.value.forEach((condition, idx) => {\n          if (idx > 0) {\n            conditions.value[idx].minQuantity = conditions.value[idx - 1].maxQuantity;\n          }\n        });\n\n        // Reset the new condition\n        newCondition.value = { minQuantity: conditions.value[conditions.value.length - 1].maxQuantity, maxQuantity: null, message: '' };\n\n        // Focus on the 'maxQuantity' field\n        nextTick(() => {\n          document.getElementById('maxQuantity').focus();\n          // Set the conditionsChanged flag to true\n        });\n        conditionsChanged.value = true;\n      }\n    };\n\n    // Method to remove a condition from the list\n    const removeCondition = (index) => {\n      // Remove the selected condition\n      conditions.value.splice(index, 1);\n\n      // If there are no conditions left, reset the minQuantity for new condition to 1\n      if (conditions.value.length === 0) {\n        newCondition.value.minQuantity = 1;\n      } else {\n        // If the removed condition was not the last one, update the next condition's minQuantity\n        if (index < conditions.value.length) {\n          // Update the minQuantity of the next condition to the maxQuantity of the previous one\n          conditions.value[index].minQuantity = conditions.value[index - 1].maxQuantity;\n        }\n      }\n      conditionsChanged.value = true;\n    };\n\n\n    const saveConditions = async () => {\n      loading.value = true;\n      settingsSaved.value = false;\n      settingsSaveError.value = false;\n      // Sending data to WordPress via AJAX\n      try {\n        const response = await fetch(mwsData.ajax_url, {\n          method: 'POST',\n          credentials: 'same-origin',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          body: new URLSearchParams({\n            action: 'save_conditions',\n            nonce: mwsData.nonce,\n            conditions: JSON.stringify(conditions.value),\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok.');\n        }\n\n        const responseData = await response.json();\n\n        if (responseData.success) {\n          // Handle success\n          console.log('Settings saved');\n          settingsSaved.value = true;\n        } else {\n          // Handle WordPress related errors\n          console.error('Error from WP');\n          settingsSaveError.value = true;\n        }\n      } catch (error) {\n        // Handle network errors\n        console.error('Fetch error:', error);\n        settingsSaveError.value = true;\n      }\n      loading.value = false;\n      conditionsChanged.value = false;\n      formModified.value = false; // Reset the formModified flag\n    }\n    onMounted(() => {\n      window.addEventListener('beforeunload', handleBeforeUnload);\n    });\n\n    onUnmounted(() => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    });\n\n    function handleBeforeUnload(event) {\n      // Check if the form has been modified\n      if (formModified.value) {\n        const message = mwsData.reloadMessage || 'You have unsaved changes. Are you sure you want to leave?';\n        event.returnValue = message; // Standard browsers (Mozilla, Chrome)\n        return message;\n      }\n    }\n\n    // Expose the state and methods to the template\n    return {\n      conditions,\n      newCondition,\n      addCondition,\n      removeCondition,\n      saveConditions,\n      isValidNewCondition,\n      loading,\n      conditionsChanged,\n      settingsSaved,\n      settingsSaveError,\n    };\n  }\n});\n\napp.mount('#wp-stock-director-settings');"]}