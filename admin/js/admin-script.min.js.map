{"version":3,"file":"admin-script.min.js","names":["createApp","ref","computed","watch","nextTick","Vue","app","setup","conditions","newCondition","minQuantity","maxQuantity","message","currentConditions","length","lastCondition","value","deep","isValidNewCondition","isRangeValid","parseInt","isMessageFilled","trim","isUniqueRange","every","condition","addCondition","push","sort","a","b","forEach","idx","document","getElementById","focus","removeCondition","index","splice","saveConditions","async","response","fetch","mwsData","ajax_url","method","credentials","headers","body","URLSearchParams","action","nonce","JSON","stringify","ok","Error","responseData","json","success","console","log","error","mount"],"sources":["admin-script.js"],"mappings":"AAAA,MAAMA,UAAEA,UAASC,IAAEA,IAAGC,SAAEA,SAAQC,MAAEA,MAAKC,SAAEA,UAAaC,IAEhDC,IAAMN,UAAU,CACpB,KAAAO,GAEE,MAAMC,EAAaP,IAAI,IACjBQ,EAAeR,IAAI,CACvBS,YAAa,EACbC,YAAa,KACbC,QAAS,KAGXT,MAAMK,GAAaK,IACjB,GAAIA,EAAkBC,OAAS,EAAG,CAChC,MAAMC,EAAgBF,EAAkBA,EAAkBC,OAAS,GACnEL,EAAaO,MAAMN,YAAcK,EAAcJ,WACjD,IACC,CAAEM,MAAM,IAGX,MAAMC,EAAsBhB,UAAS,KACnC,MAAMQ,YAAEA,EAAWC,YAAEA,EAAWC,QAAEA,GAAYH,EAAaO,MACrDG,EAA+B,OAAhBT,GAAwC,OAAhBC,GAAwBS,SAASV,GAAeU,SAAST,GAChGU,EAAkBT,EAAQU,OAAOR,OAAS,EAC1CS,EAA4C,IAA5Bf,EAAWQ,MAAMF,QAAgBN,EAAWQ,MAAMQ,OAAMC,GAC5Ed,EAAcc,EAAUd,cAE1B,OAAOQ,GAAgBE,GAAmBE,CAAa,IAgFzD,MAAO,CACLf,aACAC,eACAiB,aA/EmB,KACfR,EAAoBF,QAEtBR,EAAWQ,MAAMW,KAAK,IAAKlB,EAAaO,QACxCR,EAAWQ,MAAMY,MAAK,CAACC,EAAGC,IAAMD,EAAEnB,YAAcoB,EAAEpB,cAGlDF,EAAWQ,MAAMe,SAAQ,CAACN,EAAWO,KAC/BA,EAAM,IACRxB,EAAWQ,MAAMgB,GAAKtB,YAAcF,EAAWQ,MAAMgB,EAAM,GAAGrB,YAChE,IAIFF,EAAaO,MAAQ,CAAEN,YAAaF,EAAWQ,MAAMR,EAAWQ,MAAMF,OAAS,GAAGH,YAAaA,YAAa,KAAMC,QAAS,IAG3HR,UAAS,KACP6B,SAASC,eAAe,eAAeC,OAAO,IAElD,EA4DAC,gBAxDuBC,IAEvB7B,EAAWQ,MAAMsB,OAAOD,EAAO,GAGC,IAA5B7B,EAAWQ,MAAMF,OACnBL,EAAaO,MAAMN,YAAc,EAG7B2B,EAAQ7B,EAAWQ,MAAMF,SAE3BN,EAAWQ,MAAMqB,GAAO3B,YAAcF,EAAWQ,MAAMqB,EAAQ,GAAG1B,YAEtE,EA4CA4B,eAxCqBC,UAErB,IACE,MAAMC,QAAiBC,MAAMC,QAAQC,SAAU,CAC7CC,OAAQ,OACRC,YAAa,cACbC,QAAS,CACP,eAAgB,qCAElBC,KAAM,IAAIC,gBAAgB,CACxBC,OAAQ,kBACRC,MAAOR,QAAQQ,MACf3C,WAAY4C,KAAKC,UAAU7C,EAAWQ,WAI1C,IAAKyB,EAASa,GACZ,MAAM,IAAIC,MAAM,gCAGlB,MAAMC,QAAqBf,EAASgB,OAEhCD,EAAaE,QAEfC,QAAQC,IAAI,kBAAmBJ,GAG/BG,QAAQE,MAAM,iBAAkBL,EAEpC,CAAE,MAAOK,GAEPF,QAAQE,MAAM,eAAgBA,EAChC,GASA3C,sBAEJ,IAGFZ,IAAIwD,MAAM","ignoreList":[],"sourcesContent":["const { createApp, ref, computed, watch, nextTick } = Vue;\n\nconst app = createApp({\n  setup() {\n    // Reactive references for conditions and a new condition form\n    const conditions = ref([]);\n    const newCondition = ref({\n      minQuantity: 1,\n      maxQuantity: null,\n      message: ''\n    });\n\n    watch(conditions, (currentConditions) => {\n      if (currentConditions.length > 0) {\n        const lastCondition = currentConditions[currentConditions.length - 1];\n        newCondition.value.minQuantity = lastCondition.maxQuantity;\n      }\n    }, { deep: true });\n\n    // Computed property to validate new condition\n    const isValidNewCondition = computed(() => {\n      const { minQuantity, maxQuantity, message } = newCondition.value;\n      const isRangeValid = minQuantity !== null && maxQuantity !== null && parseInt(minQuantity) < parseInt(maxQuantity);\n      const isMessageFilled = message.trim().length > 0;\n      const isUniqueRange = conditions.value.length === 0 || conditions.value.every(condition =>\n        maxQuantity > condition.maxQuantity\n      );\n      return isRangeValid && isMessageFilled && isUniqueRange;\n    });\n\n    // Method to add a new condition to the list\n    const addCondition = () => {\n      if (isValidNewCondition.value) {\n        // Sort conditions before adding a new one\n        conditions.value.push({ ...newCondition.value });\n        conditions.value.sort((a, b) => a.minQuantity - b.minQuantity);\n\n        // Update 'minQuantity' values of each condition to ensure they are in logical order\n        conditions.value.forEach((condition, idx) => {\n          if (idx > 0) {\n            conditions.value[idx].minQuantity = conditions.value[idx - 1].maxQuantity;\n          }\n        });\n\n        // Reset the new condition\n        newCondition.value = { minQuantity: conditions.value[conditions.value.length - 1].maxQuantity, maxQuantity: null, message: '' };\n\n        // Focus on the 'maxQuantity' field\n        nextTick(() => {\n          document.getElementById('maxQuantity').focus();\n        });\n      }\n    };\n\n    // Method to remove a condition from the list\n    const removeCondition = (index) => {\n      // Remove the selected condition\n      conditions.value.splice(index, 1);\n\n      // If there are no conditions left, reset the minQuantity for new condition to 1\n      if (conditions.value.length === 0) {\n        newCondition.value.minQuantity = 1;\n      } else {\n        // If the removed condition was not the last one, update the next condition's minQuantity\n        if (index < conditions.value.length) {\n          // Update the minQuantity of the next condition to the maxQuantity of the previous one\n          conditions.value[index].minQuantity = conditions.value[index - 1].maxQuantity;\n        }\n      }\n    };\n\n\n    const saveConditions = async () => {\n      // Wysyłanie danych do WordPressa przez AJAX\n      try {\n        const response = await fetch(mwsData.ajax_url, {\n          method: 'POST',\n          credentials: 'same-origin',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          body: new URLSearchParams({\n            action: 'save_conditions',\n            nonce: mwsData.nonce,\n            conditions: JSON.stringify(conditions.value),\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok.');\n        }\n\n        const responseData = await response.json();\n\n        if (responseData.success) {\n          // Obsługa sukcesu\n          console.log('Settings saved:', responseData);\n        } else {\n          // Obsługa błędów związanych z WordPress\n          console.error('Error from WP:', responseData);\n        }\n      } catch (error) {\n        // Obsługa błędów związanych z siecią\n        console.error('Fetch error:', error);\n      }\n    }\n    // Expose the state and methods to the template\n    return {\n      conditions,\n      newCondition,\n      addCondition,\n      removeCondition,\n      saveConditions,\n      isValidNewCondition\n    };\n  }\n});\n\napp.mount('#wp-stock-director-settings');\n"]}